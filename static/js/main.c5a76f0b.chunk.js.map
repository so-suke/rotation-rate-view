{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","headers","post","alphabets","split","alphabetToNumber","forEach","alphabet","index","workRecordIndex","a","e","g","h","j","k","l","workRecordsInit","App","useState","workRecords","setWorkRecords","storeNameSearchTarget","setStoreNameSearchTarget","machineNamesSearchTarget","setMachineNamesSearchTarget","dateGetWorkRecords","setDateGetWorkRecords","useEffect","workRecordsLocal","localStorage","getItem","dateGetWorkRecordsLocal","JSON","parse","setItem","stringify","TableRowWorkRecord","filter","workRecord","machineNameWorkRecord","result","machineName","includes","isIncludesMultiMachineNames","map","format","Date","className","Container","Button","variant","onClick","get","then","response","data","shift","now","dateFormat","catch","error","alert","Form","Group","controlId","Control","as","size","defaultValue","custom","onChange","event","storeName","target","value","handleChangeStoreNameSearchTarget","disabled","hidden","InputGroup","FormControl","placeholder","machineNamesSplit","Append","Table","striped","bordered","hover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a76f0b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"date-fns\";\nimport { Container, Table, InputGroup, FormControl, Form, Button } from \"react-bootstrap\";\n\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\naxios.defaults.headers.post[\"Content-Type\"] = \"text/plain\";\n\nconst urlAccess = \"https://script.google.com/macros/s/AKfycbxXqnjYzBPgEIio3_fq2ZEQteydAe1op7YXPFT1SfPnK_XZt3whB2krTvvmvxVp0Sxv/exec\";\nconst alphabets = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nconst alphabetToNumber: { [key: string]: number } = {};\nalphabets.forEach((alphabet, index) => {\n  alphabetToNumber[alphabet] = index;\n});\nconst workRecordIndex = {\n  date: alphabetToNumber.a,\n  rotationRate: alphabetToNumber.e,\n  totalRotationNumber: alphabetToNumber.g,\n  roundBase: alphabetToNumber.h,\n  machineName: alphabetToNumber.j,\n  storeName: alphabetToNumber.k,\n  machineNumberInStore: alphabetToNumber.l,\n};\n\nconst workRecordsInit = [\n  [\"2020-11-27T15:00:00.000Z\", \"1899-12-30T09:40:00.000Z\", \"\", 11.11, 10.0, 16.5, 140, \"\", 1000, \"機種名サンプル\", \"店名サンプル\", \"\", \"\", \"\"],\n];\n\nfunction App() {\n  const [workRecords, setWorkRecords] = useState(workRecordsInit);\n  const [storeNameSearchTarget, setStoreNameSearchTarget] = useState(\"\");\n  const [machineNamesSearchTarget, setMachineNamesSearchTarget] = useState([\"\"]);\n  const [dateGetWorkRecords, setDateGetWorkRecords] = useState(\"\");\n\n  useEffect(() => {\n    const workRecordsLocal = localStorage.getItem(\"workRecords\") || \"[]\";\n    const dateGetWorkRecordsLocal = localStorage.getItem(\"dateGetWorkRecords\") || \"\";\n    setWorkRecords(JSON.parse(workRecordsLocal));\n    setDateGetWorkRecords(dateGetWorkRecordsLocal);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"workRecords\", JSON.stringify(workRecords));\n  }, [workRecords]);\n\n  useEffect(() => {\n    localStorage.setItem(\"dateGetWorkRecords\", dateGetWorkRecords);\n  }, [dateGetWorkRecords]);\n\n  const isIncludesMultiMachineNames = (machineNameWorkRecord: string) => {\n    let result = false;\n    machineNamesSearchTarget.forEach((machineName) => {\n      if (machineNameWorkRecord.includes(machineName)) {\n        result = true;\n        return;\n      }\n    });\n\n    return result;\n  };\n\n  const filterByTargetName = () => {\n    const results = workRecords.filter((workRecord: any) => {\n      return workRecord[workRecordIndex.storeName] === storeNameSearchTarget && isIncludesMultiMachineNames(workRecord[workRecordIndex.machineName]);\n    });\n\n    return results;\n  };\n\n  // スプレッドシートから稼働記録を取得してくる。\n  const getWorkRecords = () => {\n    axios\n      .get(urlAccess)\n      .then(function (response) {\n        response.data.shift();\n        setWorkRecords(response.data);\n        // 稼働記録の取得日時を保存する。\n        const now = new Date();\n        const dateFormat = format(now, \"MM月dd日 HH:mm\");\n        setDateGetWorkRecords(dateFormat);\n      })\n      .catch(function (error) {\n        alert(error);\n      });\n  };\n\n  // change系\n  const handleChangeStoreNameSearchTarget = (event: any) => {\n    const storeName = event.target.value;\n    setStoreNameSearchTarget(storeName);\n  };\n  const handleChangeMachineNamesSearchTarget = (event: any) => {\n    const machineNameMultiple = event.target.value;\n    const machineNamesSplit = machineNameMultiple.split(/\\s\\S/);\n    setMachineNamesSearchTarget(machineNamesSplit);\n  };\n\n  const TableRowWorkRecord = filterByTargetName().map((workRecord, index) => {\n    return (\n      <tr key={index}>\n        <td>{workRecord[workRecordIndex.date] === \"\" ? \"\" : format(new Date(workRecord[workRecordIndex.date]), \"yyyy-MM-dd\")}</td>\n        <td>{workRecord[workRecordIndex.rotationRate]}</td>\n        <td>{workRecord[workRecordIndex.totalRotationNumber]}</td>\n        <td>{workRecord[workRecordIndex.roundBase]}</td>\n        <td>{workRecord[workRecordIndex.machineName]}</td>\n        <td>{workRecord[workRecordIndex.machineNumberInStore]}</td>\n        <td>{workRecord[workRecordIndex.storeName]}</td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-2\">\n        <Button variant=\"outline-secondary\" className=\"mb-2\" onClick={getWorkRecords}>\n          稼働記録取得\n        </Button>\n        <p>最終取得日：{dateGetWorkRecords}</p>\n        <Form>\n          <Form.Group controlId=\"exampleForm.SelectCustom\">\n            <Form.Control as=\"select\" size=\"sm\" defaultValue=\"\" custom onChange={(event) => handleChangeStoreNameSearchTarget(event)}>\n              <option value=\"\" disabled hidden>\n                店名選択\n              </option>\n              <option value=\"DoruNakano\">DoruNakano</option>\n              <option value=\"NtNakano\">NtNakano</option>\n              <option value=\"LiNakano\">LiNakano</option>\n            </Form.Control>\n          </Form.Group>\n        </Form>\n        <InputGroup className=\"mb-3\">\n          <FormControl placeholder=\"機種名\" onChange={handleChangeMachineNamesSearchTarget} />\n          <InputGroup.Append>\n            <Button variant=\"outline-secondary\">絞り込み</Button>\n          </InputGroup.Append>\n        </InputGroup>\n        <Table striped bordered hover size=\"sm\" className=\"m-auto\">\n          <thead>\n            <tr>\n              <th>日付</th>\n              <th>回転率</th>\n              <th>総回転数</th>\n              <th>rb</th>\n              <th>機種名</th>\n              <th>台番</th>\n              <th>店名</th>\n            </tr>\n          </thead>\n          <tbody>{TableRowWorkRecord}</tbody>\n        </Table>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}